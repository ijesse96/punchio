name: Build iOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run Flutter analyze
      run: flutter analyze
      
    - name: Install CocoaPods
      run: |
        cd ios
        pod install
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Setup Apple Developer Certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply certificate to keychain
        security default-keychain -s $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
    - name: Setup Provisioning Profile
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      run: |
        PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        # Clean the base64 string and decode properly
        echo "$PROVISIONING_PROFILE_BASE64" | tr -d '\n\r' | base64 --decode > $PROVISIONING_PROFILE_PATH
        
        # Verify the provisioning profile
        echo "Provisioning profile size: $(wc -c < $PROVISIONING_PROFILE_PATH) bytes"
        echo "First 100 characters:"
        head -c 100 $PROVISIONING_PROFILE_PATH
        echo ""
        
        # Create the provisioning profiles directory
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Check if it's a valid plist and determine format
        if head -c 10 $PROVISIONING_PROFILE_PATH | grep -q "<?xml"; then
          echo "Provisioning profile is in XML format"
          # It's already XML, validate it
          if plutil -lint $PROVISIONING_PROFILE_PATH 2>/dev/null; then
            echo "XML profile is valid"
            # Extract UUID from XML
            PROFILE_UUID=$(plutil -extract UUID raw $PROVISIONING_PROFILE_PATH 2>/dev/null || echo "UUID_NOT_FOUND")
            echo "Profile UUID: $PROFILE_UUID"
            
            # Convert to binary format for Xcode
            BINARY_PROFILE_PATH=$RUNNER_TEMP/binary_profile.mobileprovision
            if plutil -convert binary1 $PROVISIONING_PROFILE_PATH -o $BINARY_PROFILE_PATH 2>/dev/null; then
              echo "Successfully converted to binary format"
              
              # Copy to the correct location with UUID as filename
              if [ "$PROFILE_UUID" != "UUID_NOT_FOUND" ]; then
                cp $BINARY_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
                echo "Copied binary profile as $PROFILE_UUID.mobileprovision"
                
                # Verify the copied file
                echo "Copied file size: $(wc -c < ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision) bytes"
                
                # Set proper permissions
                chmod 644 ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
              else
                echo "ERROR: Could not extract UUID from profile"
                exit 1
              fi
            else
              echo "ERROR: Failed to convert XML to binary format"
              exit 1
            fi
          else
            echo "ERROR: XML provisioning profile is not valid"
            exit 1
          fi
        else
          echo "Provisioning profile appears to be in binary format"
          # Try to convert binary to XML to validate and extract UUID
          TEMP_XML_PATH=$RUNNER_TEMP/temp_profile.plist
          if plutil -convert xml1 $PROVISIONING_PROFILE_PATH -o $TEMP_XML_PATH 2>/dev/null; then
            echo "Binary profile is valid (converted to XML for processing)"
            
            # Extract UUID from the XML version
            PROFILE_UUID=$(plutil -extract UUID raw $TEMP_XML_PATH 2>/dev/null || echo "UUID_NOT_FOUND")
            echo "Profile UUID: $PROFILE_UUID"
            
            # Copy to the correct location with UUID as filename
            if [ "$PROFILE_UUID" != "UUID_NOT_FOUND" ]; then
              # Copy the original binary file
              cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
              echo "Copied binary profile as $PROFILE_UUID.mobileprovision"
              
              # Verify the copied file
              echo "Copied file size: $(wc -c < ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision) bytes"
              
              # Set proper permissions
              chmod 644 ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
            else
              echo "ERROR: Could not extract UUID from profile"
              exit 1
            fi
            
            # Clean up temp file
            rm -f $TEMP_XML_PATH
          else
            echo "ERROR: Binary provisioning profile is not valid"
            exit 1
          fi
        fi
        
        # List all provisioning profiles to verify
        echo "=== Provisioning Profiles Directory Contents ==="
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Verify the profile can be read by security command
        if [ "$PROFILE_UUID" != "UUID_NOT_FOUND" ]; then
          echo "=== Verifying profile with security command ==="
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision | head -20
        fi
        
    - name: Verify Xcode Project Configuration
      run: |
        echo "=== Verifying Xcode project configuration ==="
        echo "Looking for DEVELOPMENT_TEAM:"
        grep -n "DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj || echo "No DEVELOPMENT_TEAM found"
        
        echo "Looking for CODE_SIGN_STYLE:"
        grep -n "CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj || echo "No CODE_SIGN_STYLE found"
        
        echo "Looking for PRODUCT_BUNDLE_IDENTIFIER:"
        grep -n "PRODUCT_BUNDLE_IDENTIFIER" ios/Runner.xcodeproj/project.pbxproj || echo "No PRODUCT_BUNDLE_IDENTIFIER found"
        
        echo "=== Xcode project configuration verified ==="
        
    - name: Build iOS App
      env:
        DEVELOPER_TEAM: MNR5F55U3
      run: |
        echo "=== Building iOS app with automatic signing ==="
        flutter build ipa --release \
          --build-name=1.0.${{ github.run_number }} \
          --build-number=${{ github.run_number }} \
          --export-options-plist=ios/ExportOptions.plist
          
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        path: build/ios/ipa/*.ipa