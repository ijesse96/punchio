name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup iOS build environment
      run: |
        # Install CocoaPods
        sudo gem install cocoapods
        
        # Run iOS build fix script
        chmod +x ios_build_fix.sh
        ./ios_build_fix.sh
        
    - name: Setup Apple Developer account
      run: |
        # Set up Apple Developer account authentication
        echo "üîê Setting up Apple Developer account authentication..."
        
        # Create keychain for storing credentials
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Add Apple ID to keychain (this will be handled by xcodebuild with credentials)
        echo "‚úÖ Keychain setup complete"
        
    - name: Verify iOS configuration
      run: |
        # Copy provisioning profile to iOS directory if it exists
        if [ -f "punchio.mobileprovision" ]; then
          cp punchio.mobileprovision ios/
          echo "Provisioning profile copied to iOS directory"
        fi
        
        # Verify Xcode project configuration
        echo "Checking Xcode project configuration..."
        grep -n "CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj || echo "CODE_SIGN_STYLE not found"
        grep -n "DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj || echo "DEVELOPMENT_TEAM not found"
        grep -n "PRODUCT_BUNDLE_IDENTIFIER" ios/Runner.xcodeproj/project.pbxproj || echo "PRODUCT_BUNDLE_IDENTIFIER not found"
        
    - name: Build iOS app
      run: |
        # Set environment variables for build
        export FLUTTER_BUILD_MODE=release
        
        echo "üîç Debug: Starting iOS build with Apple Developer account..."
        echo "üìã Current configuration:"
        echo "   - Team ID: ${{ secrets.TEAM_ID }}"
        echo "   - Bundle ID: com.punchio.punchio"
        echo "   - Build mode: release"
        echo "   - Apple ID: ${{ secrets.APPLE_ID }}"
        
        # Verify secrets are available
        if [ -z "${{ secrets.TEAM_ID }}" ]; then
          echo "‚ùå ERROR: TEAM_ID secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_ID }}" ]; then
          echo "‚ùå ERROR: APPLE_ID secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_PASSWORD }}" ]; then
          echo "‚ùå ERROR: APPLE_PASSWORD secret is not set!"
          exit 1
        fi
        
        # Build iOS app without code signing for CI (will create .app bundle)
        echo "üöÄ Running: flutter build ios --release --no-codesign --verbose"
        flutter build ios \
          --release \
          --no-codesign \
          --verbose || {
            echo "‚ùå Flutter build failed with exit code $?"
            echo "üîç Checking build directory contents..."
            ls -la build/ || echo "No build directory found"
            ls -la ios/build/ || echo "No ios/build directory found"
            echo "üîç Checking Flutter doctor..."
            flutter doctor -v
            exit 1
          }
          
    - name: Alternative build with xcodebuild (if Flutter build fails)
      if: failure()
      run: |
        echo "‚ùå Flutter build failed, trying direct xcodebuild..."
        cd ios
        
        echo "üîç Debug: Checking iOS project structure..."
        ls -la
        echo "üîç Checking Xcode project configuration..."
        grep -n "DEVELOPMENT_TEAM" Runner.xcodeproj/project.pbxproj
        grep -n "PRODUCT_BUNDLE_IDENTIFIER" Runner.xcodeproj/project.pbxproj
        
        # Clean build directory
        rm -rf build/
        
        echo "üöÄ Running xcodebuild without code signing..."
        # Build with xcodebuild without code signing (for CI environment)
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          PRODUCT_BUNDLE_IDENTIFIER=com.punchio.punchio \
          build \
          -verbose || {
            echo "‚ùå xcodebuild archive failed with exit code $?"
            echo "üîç Checking for common issues..."
            echo "üìã Xcode version:"
            xcodebuild -version
            echo "üìã Available simulators:"
            xcrun simctl list devices
            exit 1
          }
          
        echo "‚úÖ Build completed successfully!"
        echo "üîç Checking build output..."
        ls -la build/
        find build/ -name "*.app" -type d
          
        cd ..
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          build/ios/Release-iphoneos/
          ios/build/
        retention-days: 7
        
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-logs
        path: |
          build/
          ios/build/
        retention-days: 3
        
    - name: Cleanup
      if: always()
      run: |
        # Clean up keychain
        security delete-keychain build.keychain || true
        echo "‚úÖ Cleanup complete"