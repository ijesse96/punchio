name: Build iOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run Flutter analyze
      run: flutter analyze
      
    - name: Install CocoaPods
      run: |
        cd ios
        pod install
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Setup Apple Developer Certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply certificate to keychain
        security default-keychain -s $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
    - name: Clean Provisioning Profiles (Use Automatic Signing)
      run: |
        echo "=== Cleaning any existing provisioning profiles ==="
        # Remove any existing provisioning profiles to ensure clean automatic signing
        rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*
        echo "Provisioning profiles directory cleaned for automatic signing"
        
    - name: Verify and Fix Xcode Project Configuration
      run: |
        echo "=== Verifying Xcode project configuration ==="
        echo "Looking for DEVELOPMENT_TEAM:"
        grep -n "DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj || echo "No DEVELOPMENT_TEAM found"
        
        echo "Looking for CODE_SIGN_STYLE:"
        grep -n "CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj || echo "No CODE_SIGN_STYLE found"
        
        echo "Looking for PRODUCT_BUNDLE_IDENTIFIER:"
        grep -n "PRODUCT_BUNDLE_IDENTIFIER" ios/Runner.xcodeproj/project.pbxproj || echo "No PRODUCT_BUNDLE_IDENTIFIER found"
        
        # Ensure automatic signing is properly configured
        echo "=== Ensuring automatic signing configuration ==="
        python3 << 'EOF'
        import re
        
        # Read the project file
        with open('ios/Runner.xcodeproj/project.pbxproj', 'r') as f:
            content = f.read()
        
        # Find and replace any Manual code signing with Automatic
        content = re.sub(r'CODE_SIGN_STYLE = Manual;', 'CODE_SIGN_STYLE = Automatic;', content)
        
        # Ensure DEVELOPMENT_TEAM is set for all Runner target configurations
        runner_configs = [
            '97C147061CF9000F007C117D /* Debug */',
            '97C147071CF9000F007C117D /* Release */', 
            '249021D4217E4FDB00AE95B9 /* Profile */'
        ]
        
        for config in runner_configs:
            # Find the build settings section for this configuration
            pattern = rf'({config} = \{{[^}}]*buildSettings = \{{[^}}]*)(\}};)'
            match = re.search(pattern, content, re.DOTALL)
            if match:
                build_settings = match.group(1)
                closing = match.group(2)
                
                # Check if DEVELOPMENT_TEAM is already set
                if 'DEVELOPMENT_TEAM' not in build_settings:
                    # Add DEVELOPMENT_TEAM before the closing brace
                    new_build_settings = build_settings + '\t\t\tDEVELOPMENT_TEAM = MNR5F55U3;\n\t\t\t'
                    content = content.replace(match.group(0), new_build_settings + closing)
                    print(f"Added DEVELOPMENT_TEAM to {config}")
                
                # Ensure CODE_SIGN_STYLE is Automatic
                if 'CODE_SIGN_STYLE = Automatic' not in build_settings:
                    if 'CODE_SIGN_STYLE' in build_settings:
                        content = re.sub(r'CODE_SIGN_STYLE = [^;]+;', 'CODE_SIGN_STYLE = Automatic;', content)
                    else:
                        new_build_settings = build_settings + '\t\t\tCODE_SIGN_STYLE = Automatic;\n\t\t\t'
                        content = content.replace(match.group(0), new_build_settings + closing)
                    print(f"Set CODE_SIGN_STYLE to Automatic for {config}")
        
        # Write back the modified content
        with open('ios/Runner.xcodeproj/project.pbxproj', 'w') as f:
            f.write(content)
        
        print("Xcode project configuration updated successfully")
        EOF
        
        echo "=== Final verification ==="
        echo "DEVELOPMENT_TEAM configurations:"
        grep -n "DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj
        echo "CODE_SIGN_STYLE configurations:"
        grep -n "CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj
        
    - name: Build iOS App
      env:
        DEVELOPER_TEAM: MNR5F55U3
        CODE_SIGN_STYLE: Automatic
      run: |
        echo "=== Building iOS app with automatic signing ==="
        
        # Create a custom xcodebuild settings file to pass -allowProvisioningUpdates
        cat > $RUNNER_TEMP/xcode_build_settings.sh << 'EOF'
        #!/bin/bash
        export EXTRA_XCODEBUILD_FLAGS="-allowProvisioningUpdates"
        echo "Set EXTRA_XCODEBUILD_FLAGS to: $EXTRA_XCODEBUILD_FLAGS"
        EOF
        chmod +x $RUNNER_TEMP/xcode_build_settings.sh
        source $RUNNER_TEMP/xcode_build_settings.sh
        
        # Build with verbose output to see what's happening
        flutter build ipa --release \
          --build-name=1.0.${{ github.run_number }} \
          --build-number=${{ github.run_number }} \
          --export-options-plist=ios/ExportOptions.plist \
          --verbose
          
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        path: build/ios/ipa/*.ipa