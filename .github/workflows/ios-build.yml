name: Build iOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run Flutter analyze
      run: flutter analyze
      
    - name: Install CocoaPods
      run: |
        cd ios
        pod install
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Setup Apple Developer Certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply certificate to keychain
        security default-keychain -s $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
    - name: Setup Provisioning Profile
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      run: |
        PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        # Clean the base64 string and decode properly
        echo "$PROVISIONING_PROFILE_BASE64" | tr -d '\n\r' | base64 --decode > $PROVISIONING_PROFILE_PATH
        
        # Verify the provisioning profile
        echo "Provisioning profile size: $(wc -c < $PROVISIONING_PROFILE_PATH) bytes"
        echo "First 100 characters:"
        head -c 100 $PROVISIONING_PROFILE_PATH
        echo ""
        
        # Check if it's a valid plist (either XML or binary)
        if plutil -lint $PROVISIONING_PROFILE_PATH 2>/dev/null; then
          echo "Provisioning profile is valid plist"
          # Extract UUID from the profile
          PROFILE_UUID=$(plutil -extract UUID raw $PROVISIONING_PROFILE_PATH 2>/dev/null || echo "UUID_NOT_FOUND")
          echo "Profile UUID: $PROFILE_UUID"
          
          # Copy to the correct location with UUID as filename
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          if [ "$PROFILE_UUID" != "UUID_NOT_FOUND" ]; then
            cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
            echo "Copied profile as $PROFILE_UUID.mobileprovision"
            
            # Also try to convert to binary format if it's XML
            if head -c 10 $PROVISIONING_PROFILE_PATH | grep -q "<?xml"; then
              echo "Converting XML profile to binary format for Xcode compatibility"
              plutil -convert binary1 $PROVISIONING_PROFILE_PATH -o ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
              echo "Converted to binary format"
            fi
          else
            cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
            echo "Copied profile with original name"
          fi
        else
          echo "ERROR: Provisioning profile is not a valid plist"
          exit 1
        fi
        
    - name: Configure Xcode Project
      run: |
        # First, let's see what's in the project file
        echo "=== Looking for DEVELOPMENT_TEAM patterns ==="
        grep -n "DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj || echo "No DEVELOPMENT_TEAM found"
        
        echo "=== Looking for CODE_SIGN patterns ==="
        grep -n "CODE_SIGN" ios/Runner.xcodeproj/project.pbxproj || echo "No CODE_SIGN found"
        
        # Use Python to modify the Xcode project file with more patterns
        python3 << 'EOF'
        import re
        
        # Read the project file
        with open('ios/Runner.xcodeproj/project.pbxproj', 'r') as f:
            content = f.read()
        
        print("Original content length:", len(content))
        
        # Try multiple patterns for DEVELOPMENT_TEAM
        patterns = [
            r'DEVELOPMENT_TEAM = "";',
            r'DEVELOPMENT_TEAM = "";',
            r'DEVELOPMENT_TEAM = "";',
            r'DEVELOPMENT_TEAM = "";',
            r'DEVELOPMENT_TEAM = "";',
            r'DEVELOPMENT_TEAM = "";',
        ]
        
        changes_made = False
        for pattern in patterns:
            if re.search(pattern, content):
                content = re.sub(pattern, 'DEVELOPMENT_TEAM = MNR5F55U3;', content)
                changes_made = True
                print(f"Replaced pattern: {pattern}")
        
        # If no empty DEVELOPMENT_TEAM found, add it to build settings
        if not changes_made:
            # Find the build settings section and add DEVELOPMENT_TEAM
            build_settings_pattern = r'(buildSettings = \{[^}]*)(\};)'
            if re.search(build_settings_pattern, content):
                content = re.sub(
                    build_settings_pattern,
                    r'\1\t\t\tDEVELOPMENT_TEAM = MNR5F55U3;\n\t\t\t\2',
                    content
                )
                changes_made = True
                print("Added DEVELOPMENT_TEAM to build settings")
        
        # Write back the modified content
        with open('ios/Runner.xcodeproj/project.pbxproj', 'w') as f:
            f.write(content)
        
        print("Xcode project file updated successfully")
        print("Changes made:", changes_made)
        EOF
        
        # Show what we changed
        echo "=== After modification ==="
        grep -n "DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj || echo "Still no DEVELOPMENT_TEAM found"
        
    - name: Build iOS App
      env:
        DEVELOPER_TEAM: MNR5F55U3
        CODE_SIGN_IDENTITY: "iPhone Developer"
        PROVISIONING_PROFILE_SPECIFIER: "2a9681d5-cf75-4d72-9f01-7714f7020d15"
      run: |
        flutter build ipa --release \
          --build-name=1.0.${{ github.run_number }} \
          --build-number=${{ github.run_number }} \
          --export-method=development
          
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        path: build/ios/ipa/*.ipa