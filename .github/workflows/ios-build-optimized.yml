name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup iOS build environment
      run: |
        # Install CocoaPods (suppress verbose output)
        sudo gem install cocoapods --quiet
        
        # Run iOS build fix script (reduce output)
        chmod +x ios_build_fix.sh
        ./ios_build_fix.sh 2>/dev/null || echo "Build fix script completed"
        
    - name: Verify iOS configuration
      run: |
        echo "üîç Verifying iOS configuration..."
        
        # Copy provisioning profile to iOS directory if it exists
        if [ -f "punchio.mobileprovision" ]; then
          cp punchio.mobileprovision ios/
          echo "‚úÖ Provisioning profile copied"
        else
          echo "‚ö†Ô∏è No provisioning profile found"
        fi
        
        # Quick verification (only show errors)
        echo "üìã Key configuration:"
        grep -n "CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj | head -1
        grep -n "DEVELOPMENT_TEAM" ios/Runner.xcodeproj/project.pbxproj | head -1
        grep -n "PRODUCT_BUNDLE_IDENTIFIER" ios/Runner.xcodeproj/project.pbxproj | head -1
        
    - name: Setup Apple Developer Environment
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        echo "üîç Setting up Apple Developer environment..."
        
        # Verify secrets are available
        if [ -z "$TEAM_ID" ]; then
          echo "‚ùå ERROR: TEAM_ID secret is not set!"
          exit 1
        fi
        if [ -z "$APPLE_ID" ]; then
          echo "‚ùå ERROR: APPLE_ID secret is not set!"
          exit 1
        fi
        if [ -z "$APPLE_PASSWORD" ]; then
          echo "‚ùå ERROR: APPLE_PASSWORD secret is not set!"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are available"
        echo "üìã Configuration:"
        echo "   - Team ID: $TEAM_ID"
        echo "   - Bundle ID: com.punchio.punchio"
        echo "   - Apple ID: $APPLE_ID"
        
    - name: Setup Code Signing
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        echo "üîê Setting up code signing..."
        
        # Create keychain for code signing
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Set keychain search list
        security list-keychains -d user -s build.keychain
        
        echo "‚úÖ Code signing setup completed"
        
    - name: Build iOS app (with error capture)
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        echo "üöÄ Building iOS app..."
        
        # Build iOS app using xcodebuild directly (more reliable)
        echo "üöÄ Building iOS app with xcodebuild..."
        cd ios
        
        # Clean previous builds
        rm -rf build/
        
        # Build the app directly with xcodebuild
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/Runner.xcarchive \
          CODE_SIGN_IDENTITY="Apple Development" \
          CODE_SIGNING_REQUIRED=YES \
          CODE_SIGNING_ALLOWED=YES \
          DEVELOPMENT_TEAM="$TEAM_ID" \
          PRODUCT_BUNDLE_IDENTIFIER=com.punchio.punchio \
          archive 2>&1 | tee xcodebuild.log || {
            echo "‚ùå Xcode build failed! Key errors:"
            grep -i "error\|failed" xcodebuild.log | head -20
            echo ""
            echo "üìã Full xcodebuild log saved to xcodebuild.log"
            exit 1
          }
          
        echo "‚úÖ Xcode build completed successfully!"
        
        # Export IPA
        echo "üöÄ Exporting IPA..."
        xcodebuild -exportArchive \
          -archivePath build/Runner.xcarchive \
          -exportPath build/ipa \
          -exportOptionsPlist ../ExportOptions.plist \
          -allowProvisioningUpdates 2>&1 | tee export.log || {
            echo "‚ùå IPA export failed! Key errors:"
            grep -i "error\|failed" export.log | head -20
            echo ""
            echo "üìã Full export log saved to export.log"
            echo "üîÑ Trying alternative export method..."
            
            # Try without provisioning updates
            xcodebuild -exportArchive \
              -archivePath build/Runner.xcarchive \
              -exportPath build/ipa \
              -exportOptionsPlist ../ExportOptions.plist 2>&1 | tee export2.log || {
                echo "‚ùå Alternative export also failed!"
                grep -i "error\|failed" export2.log | head -20
                exit 1
              }
          }
          
        echo "‚úÖ IPA export completed successfully!"
        cd ..
        
    - name: Debug iOS Configuration (on failure)
      if: failure()
      run: |
        echo "üîç Debugging iOS configuration after build failure..."
        echo ""
        echo "üìã Flutter doctor output:"
        flutter doctor -v
        echo ""
        echo "üìã iOS project structure:"
        ls -la ios/
        echo ""
        echo "üìã Xcode project settings:"
        grep -n "DEVELOPMENT_TEAM\|PRODUCT_BUNDLE_IDENTIFIER\|CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj | head -10
        echo ""
        echo "üìã Export options:"
        cat ios/ExportOptions.plist
        echo ""
        echo "üìã Environment variables:"
        echo "TEAM_ID: ${TEAM_ID:-'NOT SET'}"
        echo "APPLE_ID: ${APPLE_ID:-'NOT SET'}"
        echo "APPLE_PASSWORD: ${APPLE_PASSWORD:+'SET'}"
        
    - name: Alternative build with xcodebuild (if Flutter build fails)
      if: failure()
      run: |
        echo "üîÑ Trying alternative xcodebuild approach..."
        cd ios
        
        # Clean and build with minimal output
        rm -rf build/
        
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          PRODUCT_BUNDLE_IDENTIFIER=com.punchio.punchio \
          build 2>&1 | tee xcodebuild.log || {
            echo "‚ùå xcodebuild failed! Key errors:"
            grep -i "error\|failed" xcodebuild.log | head -10
            exit 1
          }
          
        echo "‚úÖ Alternative build completed!"
        cd ..
        
    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          build/ios/Release-iphoneos/
          ios/build/
          ios/build/ipa/
        retention-days: 7
        
    - name: Upload error logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ios-error-logs
        path: |
          build.log
          xcodebuild.log
          export.log
        retention-days: 3
