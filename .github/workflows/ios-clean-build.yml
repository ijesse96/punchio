name: iOS Clean Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-14
    env:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8

    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Flutter deps
        run: flutter pub get

      - name: CocoaPods
        run: |
          gem install cocoapods -N
          cd ios
          pod repo update
          pod install

      # --- Signing material: decode + import into temp keychain ---
      - name: Decode signing files
        shell: bash
        run: |
          set -eo pipefail
          echo "$IOS_CERT_P12_BASE64" | base64 --decode > cert.p12
          echo "$IOS_PROFILE_BASE64"   | base64 --decode > Punchio.mobileprovision
        env:
          IOS_CERT_P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          IOS_PROFILE_BASE64:  ${{ secrets.IOS_PROFILE_BASE64 }}

      - name: Extract key and cert from P12
        shell: bash
        run: |
          set -eo pipefail
          openssl pkcs12 -in cert.p12 -passin pass:"$IOS_CERT_PASSWORD" -nodes -out signing.pem
          awk 'BEGIN{p=0}/-----BEGIN PRIVATE KEY-----/{p=1} p; /-----END PRIVATE KEY-----/{print; exit}' signing.pem > signing.key
          awk 'BEGIN{p=0}/-----BEGIN CERTIFICATE-----/{p=1} p; /-----END CERTIFICATE-----/{print; exit}' signing.pem > signing.cer
          # Convert private key to PKCS#1 for security import
          openssl rsa -in signing.key -out signing_rsa.key
        env:
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}

      - name: Import key+cert into temp keychain
        shell: bash
        run: |
          set -eo pipefail
          KEYCHAIN_NAME=build.keychain
          KEYCHAIN_PATH="$HOME/Library/Keychains/${KEYCHAIN_NAME}-db"

          security create-keychain -p "" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security unlock-keychain -p "" "$KEYCHAIN_NAME"

          security import signing.cer     -k "$KEYCHAIN_PATH" -A -t cert -f pemseq  -T /usr/bin/codesign -T /usr/bin/security
          security import signing_rsa.key -k "$KEYCHAIN_PATH" -A -t priv -f openssl -T /usr/bin/codesign -T /usr/bin/security

          security list-keychains -s "$KEYCHAIN_PATH" "$HOME/Library/Keychains/login.keychain-db"
          security default-keychain -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN_PATH"

          echo "ðŸ”‘ Identities:"
          security find-identity -v -p codesigning || true

      - name: Install provisioning profile
        shell: bash
        run: |
          set -eo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp Punchio.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/punchio.mobileprovision"

      # Ensure export options are modern + include teamID
      - name: Ensure ExportOptions has team & method
        shell: bash
        run: |
          set -eo pipefail
          P=ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Set :method app-store-connect" "$P" 2>/dev/null || /usr/libexec/PlistBuddy -c "Add :method string app-store-connect" "$P"
          /usr/libexec/PlistBuddy -c "Set :teamID $IOS_TEAM_ID" "$P"       2>/dev/null || /usr/libexec/PlistBuddy -c "Add :teamID string $IOS_TEAM_ID" "$P"
        env:
          IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}

      # --- Build archive with Automatic signing (Team is in project); no identity/profile overrides ---
      - name: Archive (Runner)
        shell: bash
        run: |
          set -eo pipefail
          ARCHIVE_PATH="build/ios/archive/Runner.xcarchive"
          KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"

          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            clean archive \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"

          echo "ðŸ”Ž Archive Info:"
          /usr/libexec/PlistBuddy -c 'Print :ApplicationProperties' "$ARCHIVE_PATH/Info.plist" || true

      - name: Export IPA
        shell: bash
        run: |
          set -eo pipefail
          EXPORT_DIR="build/ios/ipa"; mkdir -p "$EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath "$EXPORT_DIR" \
            -exportOptionsPlist ios/ExportOptions.plist
          ls -lah "$EXPORT_DIR"

      - uses: actions/upload-artifact@v4
        with:
          name: punchio-ipa
          path: build/**/*.ipa
          retention-days: 30