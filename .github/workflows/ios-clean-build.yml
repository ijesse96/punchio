name: iOS Clean Build

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup iOS build environment
      run: |
        # Install CocoaPods
        sudo gem install cocoapods --quiet
        
        # Navigate to iOS directory and install pods
        cd ios
        pod install
        cd ..
        
    - name: Verify GitHub Secrets
      run: |
        echo "üîç Verifying GitHub secrets..."
        echo "TEAM_ID secret exists: ${{ secrets.TEAM_ID != '' }}"
        echo "APPLE_ID secret exists: ${{ secrets.APPLE_ID != '' }}"
        echo "APPLE_PASSWORD secret exists: ${{ secrets.APPLE_PASSWORD != '' }}"
        
        if [ -z "${{ secrets.TEAM_ID }}" ]; then
          echo "‚ùå ERROR: TEAM_ID secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_ID }}" ]; then
          echo "‚ùå ERROR: APPLE_ID secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_PASSWORD }}" ]; then
          echo "‚ùå ERROR: APPLE_PASSWORD secret is not set!"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are available"
        
    - name: Setup Code Signing
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        echo "üîê Setting up code signing..."
        
        # Create keychain for code signing
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Set keychain search list
        security list-keychains -d user -s build.keychain
        
        echo "‚úÖ Code signing setup completed"
        
    - name: Build iOS App
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        echo "üöÄ Building iOS app with automatic code signing..."
        
        # Use xcodebuild with automatic provisioning
        cd ios
        
        # Clean previous builds
        rm -rf build/
        
        # Build with automatic provisioning
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/Runner.xcarchive \
          CODE_SIGN_IDENTITY="Apple Development" \
          CODE_SIGNING_REQUIRED=YES \
          CODE_SIGNING_ALLOWED=YES \
          DEVELOPMENT_TEAM="$TEAM_ID" \
          PRODUCT_BUNDLE_IDENTIFIER=com.punchio.punchio \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          archive 2>&1 | tee xcodebuild.log || {
            echo "‚ùå Xcode build failed! Key errors:"
            grep -i "error\|failed" xcodebuild.log | head -20
            echo ""
            echo "üìã Full xcodebuild log:"
            cat xcodebuild.log
            exit 1
          }
          
        echo "‚úÖ Xcode build completed successfully!"
        
        # Export IPA with automatic provisioning
        echo "üöÄ Exporting IPA..."
        xcodebuild -exportArchive \
          -archivePath build/Runner.xcarchive \
          -exportPath build/ipa \
          -exportOptionsPlist ExportOptions.plist \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration 2>&1 | tee export.log || {
            echo "‚ùå IPA export failed! Key errors:"
            grep -i "error\|failed" export.log | head -20
            echo ""
            echo "üìã Full export log:"
            cat export.log
            exit 1
          }
          
        echo "‚úÖ IPA export completed successfully!"
        
        # List the generated IPA file
        echo "üì± Generated IPA file:"
        ls -la build/ipa/*.ipa
        
        cd ..
        
    - name: Upload IPA file
      uses: actions/upload-artifact@v4
      with:
        name: punchio-ipa
        path: ios/build/ipa/*.ipa
        retention-days: 30
        
    - name: Debug on failure
      if: failure()
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        echo "üîç Debug information:"
        echo "üìã Flutter doctor:"
        flutter doctor -v
        echo ""
        echo "üìã iOS project structure:"
        ls -la ios/
        echo ""
        echo "üìã Xcode project settings:"
        grep -n "DEVELOPMENT_TEAM\|PRODUCT_BUNDLE_IDENTIFIER\|CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj | head -10
        echo ""
        echo "üìã Export options:"
        cat ios/ExportOptions.plist
        echo ""
        echo "üìã Environment variables:"
        echo "TEAM_ID: ${TEAM_ID:-'NOT SET'}"
        echo "APPLE_ID: ${APPLE_ID:-'NOT SET'}"
        echo "APPLE_PASSWORD: ${APPLE_PASSWORD:+'SET'}"
        echo ""
        echo "üìã GitHub Secrets Status:"
        echo "TEAM_ID secret exists: ${{ secrets.TEAM_ID != '' }}"
        echo "APPLE_ID secret exists: ${{ secrets.APPLE_ID != '' }}"
        echo "APPLE_PASSWORD secret exists: ${{ secrets.APPLE_PASSWORD != '' }}"
