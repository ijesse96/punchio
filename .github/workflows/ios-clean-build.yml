name: iOS Clean Build

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-14
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup iOS build environment
      run: |
        # Install CocoaPods
        sudo gem install cocoapods --quiet
        
        # Navigate to iOS directory and install pods
        cd ios
        pod install
        cd ..
        
    - name: Verify GitHub Secrets
      run: |
        echo "üîç Verifying GitHub secrets..."
        echo "IOS_CERT_P12_BASE64 secret exists: ${{ secrets.IOS_CERT_P12_BASE64 != '' }}"
        echo "IOS_PROFILE_BASE64 secret exists: ${{ secrets.IOS_PROFILE_BASE64 != '' }}"
        echo "IOS_CERT_PASSWORD secret exists: ${{ secrets.IOS_CERT_PASSWORD != '' }}"
        echo "IOS_TEAM_ID secret exists: ${{ secrets.IOS_TEAM_ID != '' }}"
        echo "IOS_BUNDLE_ID secret exists: ${{ secrets.IOS_BUNDLE_ID != '' }}"
        echo "APPLE_ID secret exists: ${{ secrets.APPLE_ID != '' }}"
        echo "APPLE_PASSWORD secret exists: ${{ secrets.APPLE_PASSWORD != '' }}"
        
        if [ -z "${{ secrets.IOS_CERT_P12_BASE64 }}" ]; then
          echo "‚ùå ERROR: IOS_CERT_P12_BASE64 secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_PROFILE_BASE64 }}" ]; then
          echo "‚ùå ERROR: IOS_PROFILE_BASE64 secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_CERT_PASSWORD }}" ]; then
          echo "‚ùå ERROR: IOS_CERT_PASSWORD secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_TEAM_ID }}" ]; then
          echo "‚ùå ERROR: IOS_TEAM_ID secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_BUNDLE_ID }}" ]; then
          echo "‚ùå ERROR: IOS_BUNDLE_ID secret is not set!"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are available"
        
    - name: Import signing certs
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_CERT_P12_BASE64 }}
        p12-password: ${{ secrets.IOS_CERT_PASSWORD }}

    - name: Install provisioning profile
      shell: bash
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${IOS_PROFILE_BASE64}" | base64 --decode > \
          ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision
      env:
        IOS_PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}

    - name: Verify signing material
      run: |
        echo "üîç Verifying imported signing material..."
        
        # Check if certificate was imported
        echo "üìã Available certificates:"
        security find-identity -v -p codesigning
        
        # Check if provisioning profile was installed
        echo "üìã Installed provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Verify the specific profile
        if [ -f ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision ]; then
          echo "‚úÖ Provisioning profile installed successfully"
          # Show profile details
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision | \
            grep -A 5 -B 5 "com.punchio.punchio" || echo "‚ö†Ô∏è  Bundle ID not found in profile"
        else
          echo "‚ùå Provisioning profile not found!"
          exit 1
        fi
        
        echo "‚úÖ Signing material verification completed"
        
    - name: Debug iOS Project
      run: |
        echo "üîç Debugging iOS project configuration..."
        echo "üìã iOS project structure:"
        ls -la ios/
        echo ""
        echo "üìã Xcode project settings:"
        grep -n "DEVELOPMENT_TEAM\|PRODUCT_BUNDLE_IDENTIFIER\|CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj | head -10
        echo ""
        echo "üìã Export options:"
        cat ios/ExportOptions.plist
        echo ""
        echo "üìã Podfile:"
        head -20 ios/Podfile
        
    - name: Build IPA (Release, manual signing)
      run: |
        /usr/libexec/PlistBuddy -c "Set :CFBundleName '${APP_DISPLAY_NAME:-Punchio}'" ios/Runner/Info.plist
        flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
      env:
        APP_DISPLAY_NAME: ${{ secrets.APP_DISPLAY_NAME }}
        
    - name: Upload IPA file
      uses: actions/upload-artifact@v4
      with:
        name: punchio-ipa
        path: build/ios/ipa/*.ipa
        retention-days: 30
        
    - name: Debug on failure
      if: failure()
      run: |
        echo "üîç Debug information:"
        echo "üìã Flutter doctor:"
        flutter doctor -v
        echo ""
        echo "üìã iOS project structure:"
        ls -la ios/
        echo ""
        echo "üìã Xcode project settings:"
        grep -n "DEVELOPMENT_TEAM\|PRODUCT_BUNDLE_IDENTIFIER\|CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj | head -10
        echo ""
        echo "üìã Export options:"
        cat ios/ExportOptions.plist
        echo ""
        echo "üìã GitHub Secrets Status:"
        echo "IOS_CERT_P12_BASE64 secret exists: ${{ secrets.IOS_CERT_P12_BASE64 != '' }}"
        echo "IOS_PROFILE_BASE64 secret exists: ${{ secrets.IOS_PROFILE_BASE64 != '' }}"
        echo "IOS_CERT_PASSWORD secret exists: ${{ secrets.IOS_CERT_PASSWORD != '' }}"
        echo "IOS_TEAM_ID secret exists: ${{ secrets.IOS_TEAM_ID != '' }}"
        echo "IOS_BUNDLE_ID secret exists: ${{ secrets.IOS_BUNDLE_ID != '' }}"
        echo "APPLE_ID secret exists: ${{ secrets.APPLE_ID != '' }}"
        echo "APPLE_PASSWORD secret exists: ${{ secrets.APPLE_PASSWORD != '' }}"
        echo "APP_DISPLAY_NAME secret exists: ${{ secrets.APP_DISPLAY_NAME != '' }}"
