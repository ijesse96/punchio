name: iOS Clean Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-14
    env:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8

    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Flutter deps
        run: flutter pub get

      - name: CocoaPods
        run: |
          gem install cocoapods -N
          cd ios
          pod repo update
          pod install

      # --- Signing material: decode + import into temp keychain ---
      - name: Decode signing files
        shell: bash
        run: |
          set -eo pipefail
          echo "$IOS_CERT_P12_BASE64" | base64 --decode > cert.p12
          echo "$IOS_PROFILE_BASE64"   | base64 --decode > Punchio.mobileprovision
        env:
          IOS_CERT_P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          IOS_PROFILE_BASE64:  ${{ secrets.IOS_PROFILE_BASE64 }}

      - name: Extract key and cert from P12
        shell: bash
        run: |
          set -eo pipefail
          openssl pkcs12 -in cert.p12 -passin pass:"$IOS_CERT_PASSWORD" -nodes -out signing.pem
          awk 'BEGIN{p=0}/-----BEGIN PRIVATE KEY-----/{p=1} p; /-----END PRIVATE KEY-----/{print; exit}' signing.pem > signing.key
          awk 'BEGIN{p=0}/-----BEGIN CERTIFICATE-----/{p=1} p; /-----END CERTIFICATE-----/{print; exit}' signing.pem > signing.cer
          # Convert private key to PKCS#1 for security import
          openssl rsa -in signing.key -out signing_rsa.key
        env:
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}

      - name: Import key+cert into temp keychain
        shell: bash
        run: |
          set -eo pipefail
          KEYCHAIN_NAME=build.keychain
          KEYCHAIN_PATH="$HOME/Library/Keychains/${KEYCHAIN_NAME}-db"

          security create-keychain -p "" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security unlock-keychain -p "" "$KEYCHAIN_NAME"

          security import signing.cer     -k "$KEYCHAIN_PATH" -A -t cert -f pemseq  -T /usr/bin/codesign -T /usr/bin/security
          security import signing_rsa.key -k "$KEYCHAIN_PATH" -A -t priv -f openssl -T /usr/bin/codesign -T /usr/bin/security

          security list-keychains -s "$KEYCHAIN_PATH" "$HOME/Library/Keychains/login.keychain-db"
          security default-keychain -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN_PATH"

          echo "ðŸ”‘ Identities:"
          security find-identity -v -p codesigning || true

      - name: Install provisioning profile
        shell: bash
        run: |
          set -eo pipefail
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp Punchio.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/punchio.mobileprovision"

      # Ensure export options are modern + include teamID
      - name: Ensure ExportOptions has team & method
        shell: bash
        run: |
          set -eo pipefail
          P=ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Set :method app-store-connect" "$P" 2>/dev/null || /usr/libexec/PlistBuddy -c "Add :method string app-store-connect" "$P"
          /usr/libexec/PlistBuddy -c "Set :teamID $IOS_TEAM_ID" "$P"       2>/dev/null || /usr/libexec/PlistBuddy -c "Add :teamID string $IOS_TEAM_ID" "$P"
        env:
          IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}

      - name: Bump iOS build number to GitHub run #
        shell: bash
        run: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${GITHUB_RUN_NUMBER}" ios/Runner/Info.plist

      # --- Build archive with Automatic signing (Team is in project); no identity/profile overrides ---
      - name: Archive (Runner)
        shell: bash
        run: |
          set -eo pipefail
          ARCHIVE_PATH="build/ios/archive/Runner.xcarchive"
          KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"

          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            clean archive \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"

          echo "ðŸ”Ž Archive Info:"
          /usr/libexec/PlistBuddy -c 'Print :ApplicationProperties' "$ARCHIVE_PATH/Info.plist" || true

      - name: Export IPA
        shell: bash
        run: |
          set -eo pipefail
          EXPORT_DIR="build/ios/ipa"; mkdir -p "$EXPORT_DIR"
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath "$EXPORT_DIR" \
            -exportOptionsPlist ios/ExportOptions.plist
          ls -lah "$EXPORT_DIR"

      - name: Check IPA identifiers (bundle id / team / profile)
        shell: bash
        run: |
          set -euo pipefail
          IPA=$(ls build/ios/ipa/*.ipa | head -n 1)
          unzip -p "$IPA" "Payload/*.app/embedded.mobileprovision" > embedded.mobileprovision
          security cms -D -i embedded.mobileprovision -o embedded.plist
          echo "application-identifier (TEAMID.bundle):"
          /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' embedded.plist || true
          unzip -o "$IPA" "Payload/*.app/Info.plist" -d ipa_tmp >/dev/null
          /usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' ipa_tmp/Payload/*.app/Info.plist || true

      - name: Validate App Store Connect .p8
        shell: bash
        run: |
          set -euo pipefail
          echo "${ASC_KEY_P8_BASE64}" | base64 --decode > asc_key.p8
          openssl pkey -in asc_key.p8 -text -noout | sed -n '1,6p'
        env:
          ASC_KEY_P8_BASE64: ${{ secrets.ASC_KEY_P8_BASE64 }}

      - name: Make ASC JWT
        shell: bash
        run: |
          set -euo pipefail
          echo "${ASC_KEY_P8_BASE64}" | base64 --decode > asc_key.p8
          python3 -m venv venv && source venv/bin/activate
          pip install --quiet pyjwt cryptography
          python - <<'PY' > jwt.txt
          import os, time, jwt
          with open('asc_key.p8','r') as f: key=f.read()
          now=int(time.time())
          print(jwt.encode(
            {"iss":os.environ["ASC_ISSUER_ID"],"aud":"appstoreconnect-v1","iat":now,"exp":now+1200},
            key, algorithm="ES256", headers={"kid":os.environ["ASC_KEY_ID"]}
          ))
          PY
        env:
          ASC_KEY_ID:    ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_P8_BASE64: ${{ secrets.ASC_KEY_P8_BASE64 }}

      - name: App visibility probe
        shell: bash
        run: |
          set -euo pipefail
          TOKEN=$(cat jwt.txt)
          URL="https://api.appstoreconnect.apple.com/v1/apps?filter%5BbundleId%5D=${IOS_BUNDLE_ID}"
          HTTP=$(curl -sS -o resp.json -w '%{http_code}' \
            -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" "$URL" || true)
          echo "HTTP=${HTTP}"
          python3 - <<'PY'
import json, sys
j=json.load(open('resp.json'))
items=j.get('data',[])
print("apps found:", len(items))
sys.exit(0 if items else 2)
PY
        env:
          IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}

      - name: Transporter list providers and dump logs on failure
        shell: bash
        run: |
          set +e
          xcrun iTMSTransporter -m provider \
            -u "${APPLE_ID}" \
            -p "${ASC_APP_SPECIFIC_PASSWORD}" \
            -v eXtreme
          CODE=$?
          echo "Transporter exit code: $CODE"
          echo "---- Latest Transporter logs ----"
          LOG_DIR="$HOME/Library/Logs/Transporter"
          ls -lt "$LOG_DIR" | head -n 5 || true
          LATEST=$(ls -t "$LOG_DIR" 2>/dev/null | head -n 1)
          if [ -n "$LATEST" ]; then
            echo "Showing $LOG_DIR/$LATEST"
            tail -n 300 "$LOG_DIR/$LATEST" || true
          fi
          exit $CODE
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          ASC_APP_SPECIFIC_PASSWORD: ${{ secrets.ASC_APP_SPECIFIC_PASSWORD }}

      - name: Upload IPA with Transporter (JWT)
        shell: bash
        run: |
          set -euo pipefail
          IPA=$(ls build/ios/ipa/*.ipa | head -n 1)
          xcrun iTMSTransporter -m upload \
            -assetFile "$IPA" \
            -jwt "$(cat jwt.txt)" \
            -v eXtreme

      - name: Upload IPA with Transporter (Apple ID)
        shell: bash
        run: |
          set -euo pipefail
          IPA=$(ls build/ios/ipa/*.ipa | head -n 1)

          # If previous step listed a provider *short name*, set it here:
          if [ -n "${PROVIDER:-}" ]; then
            xcrun iTMSTransporter -m upload \
              -assetFile "$IPA" \
              -u "${APPLE_ID}" \
              -p "${ASC_APP_SPECIFIC_PASSWORD}" \
              -itc_provider "${PROVIDER}" \
              -v eXtreme
          else
            xcrun iTMSTransporter -m upload \
              -assetFile "$IPA" \
              -u "${APPLE_ID}" \
              -p "${ASC_APP_SPECIFIC_PASSWORD}" \
              -v eXtreme
          fi
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          ASC_APP_SPECIFIC_PASSWORD: ${{ secrets.ASC_APP_SPECIFIC_PASSWORD }}
          # Set this env at the job level if the log showed a provider short name:
          # PROVIDER: JesseIbarra

      - uses: actions/upload-artifact@v4
        with:
          name: punchio-ipa
          path: build/**/*.ipa
          retention-days: 30