name: iOS Clean Build

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]

jobs:
  build-ios:
    runs-on: macos-14
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup iOS build environment
      run: |
        # Install CocoaPods
        sudo gem install cocoapods --quiet
        
        # Navigate to iOS directory and install pods
        cd ios
        pod install
        cd ..
        
    - name: Verify GitHub Secrets
      run: |
        echo "üîç Verifying GitHub secrets..."
        echo "IOS_CERT_P12_BASE64 secret exists: ${{ secrets.IOS_CERT_P12_BASE64 != '' }}"
        echo "IOS_PROFILE_BASE64 secret exists: ${{ secrets.IOS_PROFILE_BASE64 != '' }}"
        echo "IOS_CERT_PASSWORD secret exists: ${{ secrets.IOS_CERT_PASSWORD != '' }}"
        echo "IOS_TEAM_ID secret exists: ${{ secrets.IOS_TEAM_ID != '' }}"
        echo "IOS_BUNDLE_ID secret exists: ${{ secrets.IOS_BUNDLE_ID != '' }}"
        echo "APPLE_ID secret exists: ${{ secrets.APPLE_ID != '' }}"
        echo "APPLE_PASSWORD secret exists: ${{ secrets.APPLE_PASSWORD != '' }}"
        
        if [ -z "${{ secrets.IOS_CERT_P12_BASE64 }}" ]; then
          echo "‚ùå ERROR: IOS_CERT_P12_BASE64 secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_PROFILE_BASE64 }}" ]; then
          echo "‚ùå ERROR: IOS_PROFILE_BASE64 secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_CERT_PASSWORD }}" ]; then
          echo "‚ùå ERROR: IOS_CERT_PASSWORD secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_TEAM_ID }}" ]; then
          echo "‚ùå ERROR: IOS_TEAM_ID secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.IOS_BUNDLE_ID }}" ]; then
          echo "‚ùå ERROR: IOS_BUNDLE_ID secret is not set!"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are available"
        
    - name: Decode signing files
      shell: bash
      run: |
        echo "$IOS_CERT_P12_BASE64" | base64 --decode > cert.p12
        echo "$IOS_PROFILE_BASE64"   | base64 --decode > Punchio.mobileprovision
      env:
        IOS_CERT_P12_BASE64: ${{ secrets.IOS_CERT_P12_BASE64 }}
        IOS_PROFILE_BASE64:  ${{ secrets.IOS_PROFILE_BASE64 }}

    - name: Extract key and cert from P12
      shell: bash
      run: |
        # Convert p12 to a flat PEM (contains both cert and private key)
        openssl pkcs12 -in cert.p12 -passin pass:"$IOS_CERT_PASSWORD" -nodes -out signing.pem

        # Split PEM into separate files
        awk 'BEGIN{p=0}/-----BEGIN PRIVATE KEY-----/{p=1} p; /-----END PRIVATE KEY-----/{print; exit}' signing.pem > signing.key
        awk 'BEGIN{p=0}/-----BEGIN CERTIFICATE-----/{p=1} p; /-----END CERTIFICATE-----/{print; exit}' signing.pem > signing.cer

        # Quick sanity check
        test -s signing.key && test -s signing.cer || { echo "Missing key/cert after extraction"; exit 1; }
      env:
        IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}

    - name: Import key+cert into temp keychain (robust)
      shell: bash
      run: |
        set -eo pipefail

        KEYCHAIN_NAME=build.keychain
        KEYCHAIN_PATH="$HOME/Library/Keychains/${KEYCHAIN_NAME}-db"

        # Create & unlock keychain
        security create-keychain -p "" "$KEYCHAIN_NAME"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
        security unlock-keychain -p "" "$KEYCHAIN_NAME"

        # Sanity check files from previous step
        echo "üì¶ Files present:" && ls -l signing.* || true

        # Convert the private key to PKCS#1 ("openssl" format) ‚Äî most reliable for `security import`
        openssl rsa -in signing.key -out signing_rsa.key

        # Import certificate (PEM sequence) and private key (OpenSSL/PKCS#1) into our keychain
        security import signing.cer     -k "$KEYCHAIN_PATH" -A -t cert -f pemseq -T /usr/bin/codesign -T /usr/bin/security
        security import signing_rsa.key -k "$KEYCHAIN_PATH" -A -t priv -f openssl -T /usr/bin/codesign -T /usr/bin/security

        # Make this keychain active for the build
        security list-keychains -s "$KEYCHAIN_PATH" "$HOME/Library/Keychains/login.keychain-db"
        security default-keychain -s "$KEYCHAIN_PATH"
        security unlock-keychain -p "" "$KEYCHAIN_NAME"

        # Allow non-interactive codesign access
        security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN_PATH"

        echo "üîë Identities now available:"
        security find-identity -v -p codesigning || true

    - name: Install provisioning profile
      shell: bash
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp Punchio.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision

    - name: Inspect signing setup
      shell: bash
      run: |
        echo "üîë Identities:"
        security find-identity -v -p codesigning || true

        echo "üìÑ Profile app id:"
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision -o profile.plist
        /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' profile.plist || true

    - name: Verify signing material
      run: |
        echo "üîç Verifying imported signing material..."
        
        # Check if certificate was imported
        echo "üìã Available certificates:"
        security find-identity -v -p codesigning
        
        # Check if provisioning profile was installed
        echo "üìã Installed provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Verify the specific profile
        if [ -f ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision ]; then
          echo "‚úÖ Provisioning profile installed successfully"
          # Show profile details
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision | \
            grep -A 5 -B 5 "com.punchio.punchio" || echo "‚ö†Ô∏è  Bundle ID not found in profile"
        else
          echo "‚ùå Provisioning profile not found!"
          exit 1
        fi
        
        echo "‚úÖ Signing material verification completed"
        
    - name: Debug iOS Project
      run: |
        echo "üîç Debugging iOS project configuration..."
        echo "üìã iOS project structure:"
        ls -la ios/
        echo ""
        echo "üìã Xcode project settings:"
        grep -n "DEVELOPMENT_TEAM\|PRODUCT_BUNDLE_IDENTIFIER\|CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj | head -10
        echo ""
        echo "üìã Export options:"
        cat ios/ExportOptions.plist
        echo ""
        echo "üìã Podfile:"
        head -20 ios/Podfile
        
    - name: Bake Team & Bundle into Runner project (not Pods)
      shell: bash
      run: |
        set -eo pipefail
        PBX=ios/Runner.xcodeproj/project.pbxproj

        # Force DEVELOPMENT_TEAM and BUNDLE ID in Runner project
        /usr/bin/sed -i '' -E "s/DEVELOPMENT_TEAM = [A-Z0-9]*;/DEVELOPMENT_TEAM = $IOS_TEAM_ID;/g" "$PBX"
        /usr/bin/sed -i '' -E "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]+;/PRODUCT_BUNDLE_IDENTIFIER = $IOS_BUNDLE_ID;/g" "$PBX"

        # Make sure Runner uses Automatic signing (export will map the profile)
        /usr/bin/sed -i '' -E "s/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g" "$PBX"

        # Remove any lingering explicit profile/identity lines from Runner (rare but safe)
        /usr/bin/sed -i '' -E "s/PROVISIONING_PROFILE_SPECIFIER = [^;]+;//g" "$PBX"
        /usr/bin/sed -i '' -E "s/CODE_SIGN_IDENTITY = [^;]+;//g" "$PBX"

        echo "‚úÖ Patched Runner.xcodeproj for Team ${IOS_TEAM_ID} & ${IOS_BUNDLE_ID}"
      env:
        IOS_TEAM_ID:   ${{ secrets.IOS_TEAM_ID }}
        IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}

    - name: Archive with xcodebuild (Automatic at archive time)
      shell: bash
      run: |
        set -eo pipefail
        ARCHIVE_PATH="build/ios/archive/Runner.xcarchive"
        KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"

        xcodebuild \
          -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -archivePath "$ARCHIVE_PATH" \
          clean archive \
          OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"

        echo "üîé Archive Info (Team present?):"
        /usr/libexec/PlistBuddy -c 'Print :ApplicationProperties:Team' "$ARCHIVE_PATH/Info.plist" || echo "‚ùå No Team key found"

        # (optional) show app id from the profile we installed
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/punchio.mobileprovision -o profile.plist
        /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' profile.plist || true

    - name: Export IPA from archive
      shell: bash
      run: |
        set -eo pipefail
        EXPORT_DIR="build/ios/ipa"
        mkdir -p "$EXPORT_DIR"

        xcodebuild -exportArchive \
          -archivePath build/ios/archive/Runner.xcarchive \
          -exportPath "$EXPORT_DIR" \
          -exportOptionsPlist ios/ExportOptions.plist

        echo "üì¶ Exported files:" && ls -lah "$EXPORT_DIR"
        
    - name: Upload IPA file
      uses: actions/upload-artifact@v4
      with:
        name: punchio-ipa
        path: |
          build/**/*.ipa
        retention-days: 30
        
    - name: Debug on failure
      if: failure()
      run: |
        echo "üîç Debug information:"
        echo "üìã Flutter doctor:"
        flutter doctor -v
        echo ""
        echo "üìã iOS project structure:"
        ls -la ios/
        echo ""
        echo "üìã Xcode project settings:"
        grep -n "DEVELOPMENT_TEAM\|PRODUCT_BUNDLE_IDENTIFIER\|CODE_SIGN_STYLE" ios/Runner.xcodeproj/project.pbxproj | head -10
        echo ""
        echo "üìã Export options:"
        cat ios/ExportOptions.plist
        echo ""
        echo "üìã GitHub Secrets Status:"
        echo "IOS_CERT_P12_BASE64 secret exists: ${{ secrets.IOS_CERT_P12_BASE64 != '' }}"
        echo "IOS_PROFILE_BASE64 secret exists: ${{ secrets.IOS_PROFILE_BASE64 != '' }}"
        echo "IOS_CERT_PASSWORD secret exists: ${{ secrets.IOS_CERT_PASSWORD != '' }}"
        echo "IOS_TEAM_ID secret exists: ${{ secrets.IOS_TEAM_ID != '' }}"
        echo "IOS_BUNDLE_ID secret exists: ${{ secrets.IOS_BUNDLE_ID != '' }}"
        echo "APPLE_ID secret exists: ${{ secrets.APPLE_ID != '' }}"
        echo "APPLE_PASSWORD secret exists: ${{ secrets.APPLE_PASSWORD != '' }}"
        echo "APP_DISPLAY_NAME secret exists: ${{ secrets.APP_DISPLAY_NAME != '' }}"
